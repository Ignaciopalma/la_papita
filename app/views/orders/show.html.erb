<section class="order-show">
	<p id="notice"><%= notice %></p>

	<div class="bill">
		<h1>"La Papita"</h1>
		<div class="order-details">
			<h2>Detalle</h2>
			<table class="show-table">
		        <thead>
		          <td class="column-title">Producto</td>
		          <td class="column-title">Comentarios</td>
		          <td class="column-title">Cantidad</td>
		          <td class="column-title">Sub Total</td>
		        </thead>
		    
		        <tbody id="table-body">
		    	<% @order_details.each do |order_detail| %>
		    		<tr>
			        	<td><%= order_detail.product.name %></td>
			        	<% if order_detail.comments.length > 0 %>
			        	<td><%= order_detail.comments %></td>
			        	<% else %>
			        	<td><p>-----</p></td>
			        	<% end %>
			        	<td><%= order_detail.quantity %></td>
			        	<td><%= order_detail.sub_total %></td>
		        	</tr>
		        <% end %>	
		        </tbody>
	      	</table>
		</div>

		<div class="order-general">
			<h2>General</h2>
			<div class="general-info">
				<p>
				  <strong>Client:</strong>
				  <%= @order.client %>
				</p>

				<p>
				  <strong>Payment method:</strong>
				  <%= @order.payment_method %>
				</p>

				<p>
				  <strong>Total:</strong>
				  <%= @order.total %>
				</p>		
			</div>
		</div>	
	</div>
	
	
		<%= form_tag update_supplies_orders_path, method: :put do %>
			<div class="total-consumption-form">
				<% @total_consumption.each do |supply_id, total_consumption| %>
					<%= number_field_tag "supplies_ids[]", supply_id %>
					<%= number_field_tag "new_stock_amount[]", Supply.where(id: supply_id).first.stock - total_consumption %>
				<% end %>
			</div>
			<%= submit_tag %>
		<% end %>	
	
	

	<%= link_to 'Edit', edit_order_path(@order) %> |
	<%= link_to 'Back', orders_path %>

	<button id="print">Print</button>

	<script>
		// qz.websocket.connect().then(function() {
		//   alert("Connected!");
		// });

		// qz.printers.find("Generic").then(function(found) {
		// 	alert("Printer: " + found);
		// });

		// function connectAndPrint() {
		//     // our promise chain
		//     connect().then(function() {
		//         return print();
		//     }).then(function() {
		//         success();              // exceptions get thrown all the way up the stack
		//     }).catch(fail);             // so one catch is often enough for all promises
		    
		//     // NOTE:  If a function returns a promise, you don't need to wrap it in a fuction call.
		//     //        The following is perfectly valid:
		//     //
		//     //        connect().then(print).then(success).catch(fail);
		//     //
		//     // Important, in this case success is NOT a promise, so it should stay wrapped in a function() to avoid confusion
		// }

		// // connection wrapper
		// //  - allows active and inactive connections to resolve regardless
		// //  - try to connect once before firing the mimetype launcher
		// //  - if connection fails, catch the reject, fire the mimetype launcher
		// //  - after mimetype launcher is fired, try to connect 3 more times
		// function connect() {
		//     return new RSVP.Promise(function(resolve, reject) {
		//         if (qz.websocket.isActive()) {	// if already active, resolve immediately
		//             resolve();
		//         } else {
		//             // try to connect once before firing the mimetype launcher
		//             qz.websocket.connect().then(resolve, function reject() {
		//                 // if a connect was not succesful, launch the mimetime, try 3 more times
		//                 window.location.assign("qz:launch");
		//                 qz.websocket.connect({ retries: 2, delay: 1 }).then(resolve, reject);
		//             });
		//         }
		//     });
		// }

		// // print logic
		// function print() {
		//     var printer = "XPS Document Writer";
		//     var options =  { size: { width: 8.5, height: 11}, units: "in", density: "600" };
		//     var config = qz.configs.create(printer, options); 
		//     var data = [{ type: 'pdf', data: 'assets/pdf_sample.pdf' }];

		//     // return the promise so we can chain more .then().then().catch(), etc.
		//     return qz.print(config, data);
		// }

		// // notify successful print
		// function success() { 
		//     alert("Success");
		// }

		// // exception catch-all
		// function fail(e) {
		//     alert("Error: " + e);
		// }

	</script>	
</section>
